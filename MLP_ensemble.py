import numpy as np
from copy import copy
from iris_data_prepared import Data_shuffle
import matplotlib.pyplot as plt
from MLP import MLP

class Ensemble_MLP():
    
    def __init__(self, N, data, num_hidden_layers=2,
                 hidden_layer_size=80, activation="ReLU", l_rate=0.01,
                 reg=1e-4):
        self.N = N # the number of networks to build for the ensemble
        
        # make global training and test sets
        train, self.test = data.ensemble_data()
        
        # each MLP should use a random sample of the global training set
        self.ensemble = []
        for i in range(N):
            tr_data = train.copy()
            tr_data = tr_data.reindex(np.random.permutation(
                                                         tr_data.index))
            tr_data = tr_data[::3]
            X_train, y_train = Data_shuffle.get_labels(tr_data)
            self.ensemble.append(MLP(X_train, y_train, weak_learner=True,
                                                             vis=False))
        self.train()
    
    def train(self):
        for mlp in self.ensemble:
            mlp.train(50000)
            print("mlp trained")
    
    def assess(self):
        # split the labels from test set
        X_test, y_test = Data_shuffle.get_labels(self.test)
        y_test = np.ravel(y_test)
        # sum the normalised probabilities generated by each network
        probs = np.zeros((y_test.shape[0], len(np.unique(y_test))))
        for mlp in self.ensemble:
            probs += mlp.ensemble_predict(X_test)
        print(probs)
        # generate predictions for each example
        predictions = np.argmax(probs, axis=1)
        print(predictions)
        print(y_test)
        accuracy = np.mean(predictions == y_test)
        print(accuracy)
        


########################################################################
# visualisation
########################################################################

    @staticmethod
    def visualise(x, y1, y2, y3):
        plt.plot(x, y1)
        plt.plot(x, y2)
        plt.plot(x, y3)
        plt.show()

iris_data = Data_shuffle()
clf = Ensemble_MLP(100, iris_data)
clf.assess()
